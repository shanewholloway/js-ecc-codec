import {ecc_browser_api, _ecc_curveForName} from '../../ecc/browser/api.jsy'

export @{}
  ecdh_browser_api as default,
  ecdh_browser_api as ecdh_api,

export function ecdh_browser_api({namedCurve, extractable}) ::
  const base_api = ecc_browser_api('ECDH', {namedCurve, extractable})
  namedCurve = base_api.namedCurve

  return @{} __proto__: base_api,
    computeSecret(privateKey, publicKey, bits) ::
      return _web_ecdh_computeSecret @
        namedCurve, privateKey, publicKey, bits


function _web_ecdh_computeSecret(namedCurve, privateKey, publicKey, bits) ::
  return Promise.reject @ new Error @ "TODO"
  return crypto.subtle.deriveBits @
    { name: 'ECDH', namedCurve, public: publicKey}
    privateKey, bits


export function ecdh_computeSecret(namedCurve, privateKey, publicKey, bits) ::
  if !namedCurve :: namedCurve = privateKey.crv || privateKey.curve || privateKey.namedCurve
  namedCurve = _ecc_curveForName[namedCurve]
  return _web_ecdh_computeSecret(namedCurve, privateKey, publicKey, bits)

