import {generateKeyPair} from 'crypto'
import {ecc_importPublicKey, ecc_importPrivateKey} from './_import.jsy'
import {ecc_exportKey} from './_export.jsy'

export * from './_import.jsy'
export * from './_export.jsy'

export const _ecc_algs = @{}
  'ECDH': @{} name: 'ECDH', publicUse: [], privateUse: ['deriveKey', 'deriveBits']
  'ECDSA': @{} name: 'ECDSA', publicUse: ['verify'], privateUse: ['sign']

export const _ecc_curveForName = @{}
  'P-256': 'prime256v1', 'prime256v1': 'prime256v1', 'secp256r1': 'prime256v1',
  'P-384': 'secp384r1', 'secp384r1': 'secp384r1',
  'P-521': 'secp521r1', 'secp521r1': 'secp521r1',

export @{}
  ecc_nodejs_api as default,
  ecc_nodejs_api as ecc_api,

export function ecc_nodejs_api(ecc_alg, {namedCurve, extractable}) ::
  namedCurve = _ecc_curveForName[namedCurve]
  if ! namedCurve :: throw new TypeError @ "Invalid namedCurve"

  ecc_alg = _ecc_algs[ecc_alg || '']
  extractable = !! extractable

  const ecc_algorithm = @{} name: ecc_alg.name, namedCurve
  return @{}
    __proto__: null, namedCurve,

    withKeyFormat(key_format) :: return @{}
      exportKey: ecc_key => this.exportKey(key_format, ecc_key)
      importPublicKey: ecc_key_info => importPublicKey(key_format, ecc_key_info)
      importPrivateKey: ecc_key_info => importPrivateKey(key_format, ecc_key_info)

    generateKey: ecc_generateKey.bind(null, namedCurve)

    exportKey(key_format, ecc_key) ::
      return ecc_exportKey(key_format, ecc_key.keyobj || ecc_key)

    importPublicKey(key_format, ecc_key_info) ::
      return ecc_importPublicKey(namedCurve, key_format, ecc_key_info)

    importPrivateKey(key_format, ecc_key_info) ::
      return ecc_importPrivateKey(namedCurve, key_format, ecc_key_info)


function _nodejs_ecc_generateKey(namedCurve) ::
  return new Promise @\ resolve, reject ::
    generateKeyPair @ 'ec', {namedCurve},
      @\ err, publicKey, privateKey ::
        if err :: return reject(err)

        publicKey.curve = namedCurve
        privateKey.curve = namedCurve
        return resolve @: publicKey, privateKey


export function ecc_generateKey(namedCurve) ::
  namedCurve = _ecc_curveForName[namedCurve]
  if ! namedCurve :: throw new TypeError @ "Invalid namedCurve"
  return _nodejs_ecc_generateKey(namedCurve)

