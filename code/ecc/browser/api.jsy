export const _ecc_algs = @{}
  'ECDH': @{} name: 'ECDH', publicUse: [], privateUse: ['deriveKey', 'deriveBits']
  'ECDSA': @{} name: 'ECDSA', publicUse: ['verify'], privateUse: ['sign']

export const _ecc_curveForName = @{}
  'P-256': 'P-256', 'prime256v1': 'P-256', 'secp256r1': 'P-256',
  'P-384': 'P-384', 'secp384r1': 'P-384',
  'P-521': 'P-521', 'secp521r1': 'P-521',


export @{}
  ecc_browser_api as default,
  ecc_browser_api as ecc_api,

export function ecc_browser_api(ecc_alg, {namedCurve, extractable}) ::
  namedCurve = _ecc_curveForName[namedCurve]
  if ! namedCurve :: throw new TypeError @ "Invalid namedCurve"

  ecc_alg = _ecc_algs[ecc_alg || '']
  extractable = !! extractable

  const ecc_algorithm = @{}
    name: ecc_alg.name, namedCurve

  return @{}
    __proto__: null, namedCurve,

    withKeyFormat(key_format) :: return @{}
      exportKey: ecc_key => this.exportKey(key_format, ecc_key)
      importPublicKey: ecc_key_info => importPublicKey(key_format, ecc_key_info)
      importPrivateKey: ecc_key_info => importPrivateKey(key_format, ecc_key_info)

    generateKey() ::
      return crypto.subtle.generateKey @
        ecc_algorithm, extractable, [...ecc_alg.publicUse, ...ecc_alg.privateUse]

    exportKey(key_format, ecc_key) ::
      return crypto.subtle.exportKey(key_format, ecc_key)

    importPublicKey(key_format, ecc_key_info) ::
      return crypto.subtle.importKey @
        key_format, ecc_key_info,
        ecc_algorithm, extractable, ecc_alg.publicUse

    importPrivateKey(key_format, ecc_key_info) ::
      return crypto.subtle.importKey @
        key_format, ecc_key_info,
        ecc_algorithm, extractable, ecc_alg.privateUse

