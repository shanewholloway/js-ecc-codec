import {ecc_browser_api, _ecc_curveForName} from '../../ecc/browser/api.jsy'
import transcode_ecdsa from '../index.jsy'

const _sig_formats = @{} '': 'asn1', 'raw': 'raw', 'asn1': 'asn1', 'asn': 'asn1'
const _sig_hashForName = @{} '': 'SHA256',
  'SHA256': 'SHA-256', 'SHA-256': 'SHA-256', 'sha256': 'SHA-256', 'sha-256': 'SHA-256',
  'SHA384': 'SHA-384', 'SHA-384': 'SHA-384', 'sha384': 'SHA-384', 'sha-384': 'SHA-384',
  'SHA512': 'SHA-512', 'SHA-512': 'SHA-512', 'sha512': 'SHA-512', 'sha-512': 'SHA-512',

const _as_hash_alg = hash_alg =>
  ''+_sig_hashForName[hash_alg ? hash_alg.name || hash_alg : '']

export @{}
  ecdsa_browser_api as default,
  ecdsa_browser_api as ecdsa_api,

export function ecdsa_browser_api({namedCurve, hash_alg, signature_format, extractable}) ::
  const base_api = ecc_browser_api('ECDSA', {namedCurve, extractable})
  namedCurve = base_api.namedCurve
  base_api.withHash = withHash
  return withHash(hash_alg, signature_format)

  function withHash(hash_alg, def_sig_format) ::
    return @{}
      __proto__: base_api,

      sign(privateKey, data, sig_format) ::
        return _web_ecdsa_sign @
          namedCurve, hash_alg, sig_format || def_sig_format, privateKey, data

      verify(publicKey, signature, data, sig_format) ::
        return _web_ecdsa_verify @
          namedCurve, hash_alg, sig_format || def_sig_format, publicKey, signature, data


async function _web_ecdsa_sign(namedCurve, hash_alg, sig_format, privateKey, data) ::
  hash_alg = _as_hash_alg(hash_alg)
  sig_format = _sig_formats[sig_format || '']

  const u8_rawsig = new Uint8Array @
    await crypto.subtle.sign @
      { name: 'ECDSA', namedCurve, hash: {name: hash_alg} },
      privateKey, data

  return transcode_ecdsa('raw', sig_format, u8_rawsig)

function _web_ecdsa_verify(namedCurve, hash_alg, sig_format, publicKey, signature, data) ::
  hash_alg = _as_hash_alg(hash_alg)
  sig_format = _sig_formats[sig_format || '']

  const u8_rawsig = transcode_ecdsa(sig_format, 'raw', signature)
  return crypto.subtle.verify @
    { name: 'ECDSA', namedCurve, hash: {name: hash_alg} },
    publicKey, u8_rawsig, data,


export function ecdsa_sign(namedCurve, sig_format, hash_alg, privateKey, data) ::
  if !namedCurve :: namedCurve = privateKey.crv || privateKey.curve || privateKey.namedCurve
  namedCurve = _ecc_curveForName[namedCurve]
  return _web_ecdsa_sign(namedCurve, sig_format, hash_alg, privateKey, data)

export function ecdsa_verify(namedCurve, sig_format, hash_alg, publicKey, signature, data) ::
  if !namedCurve :: namedCurve = publicKey.crv || publicKey.curve || publicKey.namedCurve
  namedCurve = _ecc_curveForName[namedCurve]
  return _web_ecdsa_verify(namedCurve, sig_format, hash_alg, publicKey, signature, data)

